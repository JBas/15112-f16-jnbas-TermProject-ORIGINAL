	My main project will be used to help beginning musicians learn to play notes correctly. Based off the SmartMusic App software, the musicians will be able to input a file path to an audio file to learn to play and will view the file as musical notes on a scrolling screen. Also, there will be several “pre-loaded” songs that have already been converted to lists of notes, if the user chooses to use the default songs. If the note is played incorrectly, the moving notes will stop until the pitch is corrected, and then the song will resume. I intend on solving this by using the aubio module to detect frequencies in the wav file and then, using dictionaries, map the frequencies to the corresponding note (within some interval to account for what could be bad sound quality of the audio file). The algorithms for pitch detection, as well as music playback, have been put into an AudioFile class, which a notes attribute that is a dictionary of notes and their corresponding frequencies. Then I will create a sheetMusic class that contains all the drawing functions specifically for the sheet music itself (staff, title, notes, etc.), and will use both the list of notes and this class to draw out the notes in the list.

	One feature of my project will be a composition mode, where the user can click on the staff to generate his/her own songs. Again, I will use the sheetMusic class to draw out the notes that are appended to a musicList whenever the user clicks on the staff. Using Pyaudio, the user can also play back the composition, as Pyaudio will just take the musicList and use the dictionary of notes and frequencies to play the required frequencies. I modeled the user interface generally on the SmartMusic user interface. I tried to avoid using text and opted for icon-based buttons in order to make the project look more appealing and more intuitive. 